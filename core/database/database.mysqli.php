<?php
include_once "ezSQL/shared/ez_sql_core.php";
include_once "ezSQL/mysqli/ez_sql_mysqli.php";

class Database extends ezSQL_mysqli {


    public function __construct($dbuser = '', $dbpassword = '', $dbname = '', $dbhost = 'localhost', $encoding = '')
    {
        parent::__construct($dbuser, $dbpassword, $dbname, $dbhost, $encoding);
        $this->hide_errors();
    }


    /**
     * It captures ezSQL->query() and "Database Warning message" to print out as SQL error in JSON.
     *
     * @param $query
     * @return mixed
     */
    public function query( $query )
    {
        debug_database_log( $query );
        ob_start();
        $re = parent::query($query); // TODO: Change the autogenerated stub
        $warning = ob_get_clean();

        if ( $warning ) {
            error( -1122, 'DATABASE WARNING: ' . $warning);
        }
        if ( $this->captured_errors ) {
            foreach ( $this->captured_errors as $e ) {
                $message = "$e[error_str] - $e[query]";

                debug_database_log($message);
                debug_print( debug_backtrace() );

                // @attention After getting one error, it clears all captured error for easy debugging. If you do not clear, the next query will be set to error.
                $this->captured_errors = [];
                if (strpos($e['error_str'], "Duplicate entry '") === 0) {
                    return ERROR_KEY_EXISTS;
                }
                else {
                    return ERROR_DATABASE_QUERY;
                }
            }
        }
        return $re;
    }



    /* @short Inserts a record into a table.
     *
     * @note
    Do not use 'REPLACE INTO'

     *
     * @param string $table_name
    table name
     * @param associative-array $values
    fields and its values.
     * @return number - idx of last inserted record
     *          or error number on failure.
     *

    This is the same as PDO_STATEMENT::execute
    @code
    $db->insert('config', array('code'=>'insert_test', 'data'=>'abc def', 'stamp'=>time()));
    @endcode


     *
     */
    public function insert($table_name, $kvs) {
        foreach($kvs as $key => $val) {
            $key_list[] = $key;
            $val_list[] = $this->escape($val);
        }
        $keys = "`".implode("`,`",$key_list)."`";
        $vals = "'".implode("','",$val_list)."'";
        $q = "INSERT INTO `{$table_name}` ({$keys}) VALUES ({$vals})";
        $re = $this->query($q);
        if ( $re < 0 ) return $re; // database error.
        if ( isset( $this->insert_id ) ) return $this->insert_id;
        else return ERROR_UNKNOWN; // unknown error.
    }


    /** @short updates table
     *
     *
     * @param $table - the name of the table to be updated.
     * @param $kvs - the array of field & value.
     * @param $cond - array of condition for WHERE statement.
     * @code
     *      $db->update('test', array('id'=>'id1-updated', 'name'=>'name2'), array('id'=>'id1'));
     * @endcode
     *
     *
     * @warning it does not return data.
     *
     */
    public function update($table, $kvs, $cond)
    {
        if ( ! $this->secure_cond( $cond ) ) return;

        foreach($kvs as $k => $v) {
            $v = $this->escape($v);
            $k = $this->escape($k);
            $sets[] = "$k='$v'";
        }
        $set = implode(", ", $sets);
        $q = "UPDATE $table SET $set WHERE $cond";

        $this->query($q);
    }



    public function secure_cond( $cond ) {
        $secure = true;
        if ( stripos( $cond, ';' ) !== false ) $secure = false;
        if ( stripos( $cond, 'SELECT ') !== false ) $secure = false;
        if ( stripos( $cond, 'replace ') !== false ) $secure = false;
        if ( stripos( $cond, 'UPDATE ') !== false ) $secure = false;
        if ( stripos( $cond, 'DELETE ') !== false ) $secure = false;
        if ( $secure === false ) error( ERROR_INSCURE_SQL_CONDITION );

        return $secure;
    }


}

$db = new Database( $DATABASE_USER, $DATABASE_PASSWORD, $DATABASE_NAME, $DATABASE_HOST);

function db() {
    global $db;
    return $db;
}

